/*
  Заготовка чек листа
*/

'use strict';

var express = require('express'),
	router = express.Router({strict:true}),
	bodyParser = require('body-parser'),
	email = require('emailjs/email'),
	path = require('path'),
	_ = require('./lib');

/////////////////////////////////////////////////////////////////////////
module.exports = function(cfg, uac){ 

var dbs = {
	'44' : require('./sqlite')(path.join(/*path.dirname(require.main.filename)*/process.cwd(), 'db/todos.db'))
}
/////////////////////////////////////////////////////////////////////////


router.route('/todos')
.get(function(req, res){ 
	var db = dbs[req.query.id];
	if (typeof db === 'undefined') {
		res.json({error:'Отсутствует база данных: ' + req.query.id});
		return;
	}
	
	uac.userData(req.ntlm.UserName, { class: 'groups' })
	.then(data=>data.access.filter( item=>item.granted ).map(item=>item.id) )
	.then(grp=>{
		if (!grp.length){
			res.json({error:'Отсутствует доступ хотябы к одной из групп'});
			return;
		}
		var sql = `SELECT * FROM todos WHERE group_id in (${grp.join(',')})` //условие на все доступные группы

		if (req.query.group){ 
			if	( grp.indexOf(parseInt(req.query.group)) === -1 ){
				res.json({error:'Отсутствует доступ к требуемой группе'});
				return;
			}
			sql = `SELECT * FROM todos WHERE group_id = ${req.query.group}`  //условие на строго заданную и при этом доступную группу
		}

		return db(sql)
			.then(todos => res.json(_.table.simplify(todos)) )
	})
	.catch(err=>_.stdErr(err, res))
})

.put(bodyParser.json(), function(req, res){ 
	var db = dbs[req.query.id];
	if (typeof db === 'undefined') {
		res.json({error:'Отсутствует база данных: ' + req.query.id});
		return;
	}

	var el = req.body;
	uac.userData(req.ntlm.UserName, { object: el.group_id })
	.then(data=>{
		if (!data.access.length || !data.access[0].granted){
			res.json({error:'Отсутствует доступ'});
			return;
		}
	
		if (!('id' in el)){ //элемент без id кандидат на добавление
			return db(
				'INSERT INTO todos VALUES (null, ?, ?, "", null, null, null, ?, ?)',
				[el.parent_id, el.group_id, data.id, data.id]
			)
			.then(id=>db(`SELECT * FROM todos WHERE id=${id}`))
			.then(data=>res.json(data[0]))
			
		} else { //елемент с id - делаем изменения
			var upd = _.table.updateStatement('todos', el);
			return db(upd.sql, upd.params)
				.then(()=>res.json({id:el.id}))
		}
	})
	.catch(err=>_.stdErr(err, res))		
})

.delete(bodyParser.json(), function(req, res){ 
	var db = dbs[req.query.id];
	if (typeof db === 'undefined') {
		res.json({error:'Отсутствует база данных: ' + req.query.id});
		return;
	}

	var el = req.body;
	if ('id' in el){
		return db(`SELECT id FROM todos WHERE parent_id = ${el.id}`)
		.then(ids=>{
			if (!ids.length)	
				return db(`DELETE FROM todos WHERE id = ${el.id}`)
					.then(ids=>res.json({result:true}))
			else
				return res.json({result:false})
		})
		.catch(err=>_.stdErr(err, res))
	}
})

return router;

}